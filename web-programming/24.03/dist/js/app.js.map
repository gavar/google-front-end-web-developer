{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","noop","icons","Component","props","_this","this","_classCallCheck","repaint","dirty","render","state","componentWillMount","componentDidMount","events","document","createDocumentFragment","assign","initialState","next","prev","setTimeout","type","listener","options","addEventListener","evt","dispatchEvent","removeEventListener","INITIAL_STORE_STATE","moves","stars","startTime","completeTime","STORE","GAME_OVER_EVENT","Event","CARD_CLASSES","MemoryGame","_this2","_possibleConstructorReturn","__proto__","getPrototypeOf","delay","deck","onDeckClick","bind","restart","onRestartClick","style","display","visible","innerText","toString","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","cards","Symbol","iterator","done","card","status","element","classList","add","remove","apply","err","return","length","pop","_this3","key","setState","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","icon","createElement","appendChild","push","shows","cloneNode","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_icon","array","t","Math","floor","random","shuffle","fragment","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_card","_fragment","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_star","_this4","update","setInterval","mistakes","now","Date","duration","seconds","getSeconds","getMilliseconds","minutes","getMinutes","text","time","countOf","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","count","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_this5","cardOf","selections","hasMatch","onSuccessfulMatch","onMatchFailure","indexes","first","firstElementChild","className","_this6","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","index","isGameOver","_this7","isAnyShownPreviously","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","calculateStars","deleteStatusByIndexes","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","console","log","e","target","HTMLLIElement","onSelectListElement","GameOver","_this8","game","onGameOver","onPlayAgainClick","view","gameView","querySelector","memoryGame","gameOverView"],"mappings":"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","file":"js/app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/** Empty function for stub purposes. */\r\nfunction noop() { }\r\n\r\n/** List of icons. */\r\nconst icons: string[] = [\r\n    \"anchor\",\r\n    \"bicycle\",\r\n    \"bolt\",\r\n    \"bomb\",\r\n    \"cube\",\r\n    \"diamond\",\r\n    \"leaf\",\r\n    \"paper-plane-o\",\r\n];\r\n\r\n/** Shuffle array entries. */\r\nfunction shuffle<T>(array: T[]): T[] {\r\n    let t: T;\r\n    let r: number;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        r = Math.floor(Math.random() * i);\r\n        t = array[i];\r\n        array[i] = array[r];\r\n        array[r] = t;\r\n    }\r\n    return array;\r\n}\r\n\r\ninterface Component<P, S> {\r\n    /** Called immediately after a component is mounted. */\r\n    componentWillMount?(props: Readonly<P>, state: Readonly<S>): void;\r\n\r\n    /** Called immediately after a component is mounted. */\r\n    componentDidMount?(props: Readonly<P>, state: Readonly<S>): void;\r\n}\r\n\r\n/**\r\n * Base component that provides lifecycle hooks and automatically repaints whenever state changes.\r\n */\r\nabstract class Component<P, S> implements EventTarget {\r\n\r\n    private readonly events: EventTarget;\r\n    private readonly props: Readonly<P>;\r\n    private readonly state: Readonly<S>;\r\n    private dirty: boolean;\r\n\r\n    protected constructor(props: P) {\r\n        this.componentWillMount = this.componentWillMount || noop;\r\n        this.componentDidMount = this.componentDidMount || noop;\r\n\r\n        this.events = document.createDocumentFragment();\r\n        this.props = {...props as any};\r\n        this.state = this.initialState();\r\n\r\n        this.componentWillMount(this.props, this.state);\r\n        this.render(this.props, this.state);\r\n        this.componentDidMount(this.props, this.state);\r\n    }\r\n\r\n    /**\r\n     * Set next state of the component to render.\r\n     * @param next - function that returns next state of the component.\r\n     */\r\n    setState(next: (prev?: S, props?: P) => Partial<S> | void);\r\n\r\n    /**\r\n     * Set next state of the component to render.\r\n     * @param next - next state value.\r\n     */\r\n    setState(next: Partial<S>);\r\n\r\n    setState(next) {\r\n        const prev = this.state;\r\n        const props = this.props;\r\n\r\n        if (typeof next === \"function\")\r\n            next = next(prev, props) || prev;\r\n\r\n        Object.assign(this.state, next);\r\n        if (this.dirty) return;\r\n        this.dirty = true;\r\n        setTimeout(this.repaint, 0);\r\n    }\r\n\r\n    /** Render state of the component. */\r\n    abstract render(props?: Readonly<P>, state?: Readonly<S>);\r\n\r\n    /** @inheritDoc */\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void {\r\n        this.events.addEventListener(type, listener, options);\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    dispatchEvent(evt: Event): boolean {\r\n        return this.events.dispatchEvent(evt);\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void {\r\n        this.events.removeEventListener(type, listener, options);\r\n    }\r\n\r\n    /** Get initial state of the component. */\r\n    protected initialState(): S {\r\n        return {} as any;\r\n    }\r\n\r\n    private readonly repaint = () => {\r\n        this.dirty = false;\r\n        this.render(this.props, this.state);\r\n    };\r\n}\r\n\r\ninterface StoreState {\r\n    moves: number;\r\n    stars: number;\r\n    startTime: number;\r\n    completeTime: number;\r\n}\r\n\r\nconst INITIAL_STORE_STATE: StoreState = {\r\n    moves: 0,\r\n    stars: 3,\r\n    startTime: 0,\r\n    completeTime: 0,\r\n};\r\n\r\n/** Global application state storage. */\r\nconst STORE: StoreState = {...INITIAL_STORE_STATE};\r\n\r\n/** Dev purposes cheat to win in 1 move. */\r\nconst QUICK_WIN = false;\r\n\r\n/** Event fired when user completes the game. */\r\nconst GAME_OVER_EVENT = new Event(\"game-over\");\r\n\r\nconst CORRECT = \"correct\";\r\nconst INCORRECT = \"incorrect\";\r\nconst SELECTION = \"selection\";\r\ntype MemoryGameCardStatus = \"selection\" | \"correct\" | \"incorrect\";\r\n\r\ninterface MemoryGameProps {\r\n    time: HTMLElement;\r\n    deck: HTMLElement;\r\n    moves: HTMLElement;\r\n    stars: HTMLElement;\r\n    restart: HTMLElement;\r\n}\r\n\r\ninterface MemoryGameState {\r\n    visible: boolean;\r\n    mistakes: number;\r\n    stars: HTMLElement[];\r\n    cards: MemoryGameCard[];\r\n}\r\n\r\ninterface MemoryGameCard {\r\n    shows: number;\r\n    element: HTMLElement;\r\n    status?: MemoryGameCardStatus;\r\n}\r\n\r\n/** List of dynamically applied card classes. */\r\nconst CARD_CLASSES = [\r\n    \"open\",\r\n    \"show\",\r\n    \"match\",\r\n    \"wrong\",\r\n];\r\n\r\nclass MemoryGame extends Component<MemoryGameProps, MemoryGameState> {\r\n\r\n    private readonly delay: number = 1000;\r\n\r\n    constructor(props: MemoryGameProps) {\r\n        super(props);\r\n\r\n        // events\r\n        props.deck.addEventListener(\"click\", this.onDeckClick.bind(this));\r\n        props.restart.addEventListener(\"click\", this.onRestartClick.bind(this));\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public render(props: Readonly<MemoryGameProps>, state: Readonly<MemoryGameState>) {\r\n\r\n        props.deck.style.display = state.visible ? null : \"none\";\r\n        props.moves.innerText = STORE.moves.toString();\r\n\r\n        // update cards\r\n        for (const card of state.cards) {\r\n            switch (card.status) {\r\n                case CORRECT:\r\n                    card.element.classList.add(\"show\", \"match\");\r\n                    break;\r\n\r\n                case SELECTION:\r\n                    card.element.classList.add(\"show\", \"open\");\r\n                    break;\r\n\r\n                case INCORRECT:\r\n                    card.element.classList.add(\"show\", \"open\", \"wrong\");\r\n                    break;\r\n\r\n                default:\r\n                    card.element.classList.remove.apply(card.element.classList, CARD_CLASSES);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // update stars\r\n        while (state.stars.length > STORE.stars)\r\n            state.stars.pop().remove();\r\n    }\r\n\r\n    /** Restart the game. */\r\n    public restart() {\r\n\r\n        // reset application state\r\n        for (const key in STORE) delete STORE[key];\r\n        Object.assign(STORE, INITIAL_STORE_STATE);\r\n\r\n        this.setState((state, props) => {\r\n\r\n            // default state\r\n            const next = this.initialState();\r\n\r\n            // remove previous cards\r\n            for (const card of state.cards)\r\n                card.element.remove();\r\n\r\n            // create cards\r\n            for (const icon of icons) {\r\n                const element = document.createElement(\"li\");\r\n                element.classList.add(\"card\");\r\n\r\n                const i = document.createElement(\"i\");\r\n                i.classList.add(\"fa\", `fa-${icon}`);\r\n                element.appendChild(i);\r\n\r\n                next.cards.push(\r\n                    {shows: 0, element},\r\n                    {shows: 0, element: element.cloneNode(true) as HTMLElement},\r\n                );\r\n            }\r\n\r\n            // remove previous stars\r\n            for (const star of state.stars)\r\n                star.remove();\r\n\r\n            // create stars\r\n            for (let i = 0; i < STORE.stars; i++) {\r\n                const element = document.createElement(\"li\");\r\n                const icon = document.createElement(\"i\");\r\n                icon.classList.add(\"fa\", \"fa-star\");\r\n                element.appendChild(icon);\r\n                next.stars.push(element);\r\n            }\r\n\r\n            // quick win\r\n            if (QUICK_WIN) {\r\n                for (let i = next.cards.length - 3; i >= 0; i--) {\r\n                    next.cards[i].status = CORRECT;\r\n                }\r\n            }\r\n\r\n            // shuffle\r\n            shuffle(next.cards);\r\n\r\n            // attach cards to the document\r\n            {\r\n                const fragment = document.createDocumentFragment();\r\n                for (const card of next.cards) fragment.appendChild(card.element);\r\n                props.deck.appendChild(fragment);\r\n            }\r\n\r\n            // attach stars to the document\r\n            {\r\n                const fragment = document.createDocumentFragment();\r\n                for (const star of next.stars) fragment.appendChild(star);\r\n                props.stars.appendChild(fragment);\r\n            }\r\n\r\n            return next;\r\n        });\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    componentWillMount() {\r\n        this.restart();\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    componentDidMount(props: MemoryGameProps) {\r\n        this.update(props);\r\n        setInterval(() => this.update(props), 250);\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    protected initialState(): MemoryGameState {\r\n        return {\r\n            visible: true,\r\n            mistakes: 0,\r\n            stars: [],\r\n            cards: [],\r\n        };\r\n    }\r\n\r\n    private update(props: Readonly<MemoryGameProps>) {\r\n        const now = Date.now();\r\n        const duration = new Date((STORE.completeTime || now) - (STORE.startTime || now));\r\n\r\n        let seconds: number | string = duration.getSeconds();\r\n        if (duration.getMilliseconds() >= 500) seconds++;\r\n        if (seconds < 10) seconds = \"0\" + seconds;\r\n\r\n        let minutes: number | string = duration.getMinutes();\r\n        if (minutes < 10) minutes = \"0\" + minutes;\r\n\r\n        const text = `${minutes}:${seconds}`;\r\n        if (props.time.innerText !== text)\r\n            props.time.innerText = text;\r\n    }\r\n\r\n    private isGameOver(state: MemoryGameState) {\r\n        return this.countOf(state.cards, CORRECT) === state.cards.length;\r\n    }\r\n\r\n    private cardOf(cards: MemoryGameCard[], element: HTMLLIElement): MemoryGameCard {\r\n        for (const card of cards)\r\n            if (card.element === element)\r\n                return card;\r\n    }\r\n\r\n    private countOf(cards: MemoryGameCard[], status: MemoryGameCardStatus): number {\r\n        let count = 0;\r\n        for (const card of cards)\r\n            if (card.status === status)\r\n                count++;\r\n\r\n        return count;\r\n    }\r\n\r\n    private onSelectListElement(element: HTMLLIElement) {\r\n        this.setState(state => {\r\n\r\n            // start timer\r\n            if (STORE.startTime <= 0)\r\n                STORE.startTime = Date.now();\r\n\r\n            // check if card already selected or correct\r\n            const card = this.cardOf(state.cards, element);\r\n            switch (card.status) {\r\n                case SELECTION:\r\n                case CORRECT:\r\n                    return;\r\n            }\r\n\r\n            // max active selections\r\n            if (this.countOf(state.cards, SELECTION) > 1)\r\n                return;\r\n\r\n            // set card as active\r\n            card.status = SELECTION;\r\n            card.shows++;\r\n\r\n            const selections = [];\r\n            for (let i = 0; i < state.cards.length; i++)\r\n                if (state.cards[i].status === SELECTION)\r\n                    selections.push(i);\r\n\r\n            // decide if correct selections\r\n            if (selections.length > 1) {\r\n                STORE.moves++;\r\n                const match = this.hasMatch(state, selections);\r\n                if (match) this.onSuccessfulMatch(selections);\r\n                else this.onMatchFailure(selections);\r\n            }\r\n\r\n            return state;\r\n        });\r\n    }\r\n\r\n    private hasMatch(state: MemoryGameState, indexes: number[]) {\r\n        if (indexes.length < 1)\r\n            return false;\r\n\r\n        const first = state.cards[indexes[0]].element.firstElementChild;\r\n        for (let i = 1; i < indexes.length; i++) {\r\n            const icon = state.cards[indexes[i]].element.firstElementChild;\r\n            if (first.className !== icon.className)\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private onSuccessfulMatch(indexes: number[]) {\r\n        this.setState(state => {\r\n            // update status\r\n            for (const index of indexes)\r\n                state.cards[index].status = CORRECT;\r\n\r\n            // game over?\r\n            if (this.isGameOver(state)) {\r\n                STORE.completeTime = Date.now();\r\n                this.dispatchEvent(GAME_OVER_EVENT);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onMatchFailure(indexes: number[]) {\r\n        this.setState(state => {\r\n            let isAnyShownPreviously = false;\r\n\r\n            // update status\r\n            for (const index of indexes) {\r\n                const card = state.cards[index];\r\n                if (card.shows > 1) isAnyShownPreviously = true;\r\n                card.status = INCORRECT;\r\n            }\r\n\r\n            // check if made mistake\r\n            if (isAnyShownPreviously)\r\n                state.mistakes++;\r\n\r\n            // update stars\r\n            STORE.stars = this.calculateStars(state.mistakes);\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.deleteStatusByIndexes(indexes);\r\n        }, this.delay);\r\n    }\r\n\r\n    private deleteStatusByIndexes(indexes: number[]) {\r\n        this.setState((state) => {\r\n            for (const index of indexes) {\r\n                delete state.cards[index].status;\r\n            }\r\n        });\r\n    }\r\n\r\n    private calculateStars(mistakes: number): number {\r\n        console.log(\"moves:\", STORE.moves, \"mistakes:\", mistakes);\r\n        // convert mistakes to stars\r\n        if (mistakes < 3) return 3; // less then 3 mistakes\r\n        if (mistakes < 6) return 2; // from 3 to 5 mistakes\r\n        return 1; // more then 5 mistakes\r\n    }\r\n\r\n    private onDeckClick(e: MouseEvent) {\r\n        if (e.target instanceof HTMLLIElement)\r\n            this.onSelectListElement(e.target);\r\n    }\r\n\r\n    private onRestartClick() {\r\n        this.restart();\r\n    }\r\n}\r\n\r\ninterface GameOverProps {\r\n    view: HTMLElement;\r\n    game: MemoryGame;\r\n    minutes: HTMLElement;\r\n    seconds: HTMLElement;\r\n    moves: HTMLElement;\r\n    stars: HTMLElement;\r\n    restart: HTMLElement;\r\n}\r\n\r\ninterface GameOverState {\r\n    visible: boolean;\r\n}\r\n\r\nclass GameOver extends Component<GameOverProps, GameOverState> {\r\n\r\n    constructor(props: GameOverProps) {\r\n        super(props);\r\n        props.game.addEventListener(\"game-over\", this.onGameOver.bind(this));\r\n        props.restart.addEventListener(\"click\", this.onPlayAgainClick.bind(this));\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    render(props?: Readonly<GameOverProps>, state?: Readonly<GameOverState>) {\r\n\r\n        const duration = new Date(STORE.completeTime - STORE.startTime);\r\n        props.seconds.innerText = `${duration.getSeconds()} seconds`;\r\n        props.minutes.innerText = `${duration.getMinutes()} minutes`;\r\n\r\n        props.moves.innerText = STORE.moves.toString();\r\n        props.stars.innerText = STORE.stars.toString();\r\n\r\n        switch (state.visible) {\r\n            case true:\r\n                props.view.classList.add(\"show\");\r\n                break;\r\n            case false:\r\n                props.view.classList.remove(\"show\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    protected initialState(): GameOverState {\r\n        return {\r\n            visible: undefined,\r\n        };\r\n    }\r\n\r\n    private onGameOver() {\r\n        this.setState({visible: true});\r\n    }\r\n\r\n    private onPlayAgainClick() {\r\n        this.setState((state, props) => {\r\n            state.visible = false;\r\n            props.game.restart();\r\n            return state;\r\n        });\r\n    }\r\n}\r\n\r\n// RUN GAME\r\nconst gameView = document.querySelector<HTMLElement>(\".game\");\r\nconst memoryGame = new MemoryGame({\r\n    deck: gameView.querySelector<HTMLUListElement>(\".deck\"),\r\n    time: gameView.querySelector<HTMLElement>(\".time\"),\r\n    moves: gameView.querySelector<HTMLElement>(\".moves\"),\r\n    stars: gameView.querySelector<HTMLElement>(\".stars\"),\r\n    restart: gameView.querySelector<HTMLElement>(\".restart\"),\r\n});\r\n\r\nconst gameOverView = document.querySelector<HTMLElement>(\".game-over\");\r\nconst gameOver = new GameOver({\r\n    game: memoryGame,\r\n    view: gameOverView,\r\n    seconds: gameOverView.querySelector<HTMLElement>(\".seconds\"),\r\n    minutes: gameOverView.querySelector<HTMLElement>(\".minutes\"),\r\n    moves: gameOverView.querySelector<HTMLElement>(\".moves\"),\r\n    stars: gameOverView.querySelector<HTMLElement>(\".stars\"),\r\n    restart: gameOverView.querySelector<HTMLElement>(\".restart\"),\r\n});\r\n"],"sourceRoot":""}